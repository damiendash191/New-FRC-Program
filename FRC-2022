/*----------------------------------------------------------------------------*/
/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package frc.robot;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.gradle file in the
 * project.
 */
public class Robot extends TimedRobot {
  /**
   * This function is run when the robot is first started up and should be used
   * for any initialization code.
   */
  

   //Left Motors
    SpeedController m_frontLeft = (SpeedController) new TalonSRX(1);
    SpeedController m_rearLeft = (SpeedController) new TalonSRX(2);
    SpeedControllerGroup m_left = new SpeedControllerGroup(m_frontLeft, m_rearLeft);    
 
    //Right Motors
    SpeedController m_frontRight = (SpeedController) new TalonSRX(3);
    SpeedController m_rearRight = (SpeedController) new TalonSRX(4);
    SpeedControllerGroup m_right = new SpeedControllerGroup(m_frontRight, m_rearRight);
 
    //Drive Train
    DifferentialDrive DriveTrain = new DifferentialDrive(m_left, m_right);
  
  //Intake system 
  private final TalonSRX flailer = new TalonSRX(4);
  
  //Loader
  private final TalonSRX Loader = new TalonSRX(9);

  //Shooter System
  private final TalonSRX shootermaster = new TalonSRX(5);
  private final TalonSRX shooterslave = new TalonSRX(6);
  
  //Arms
  private final TalonSRX leftArm = new TalonSRX(7);
  private final TalonSRX rightArm = new TalonSRX(8);
  
  //joystick
  private final Joystick stick = new Joystick(0);
  
  //pneumatics
  private final Compressor comp = new Compressor();
  private final DoubleSolenoid intakeDoor = new DoubleSolenoid(0, 1);
  private final DoubleSolenoid armAngel = new DoubleSolenoid(2, 3);
  
  







  @Override
  public void robotInit() {
     //invert left motors and left arm
    m_left.setInverted(true);
    leftArm.setInverted(true);
  }

  @Override
  public void autonomousInit() {
  }

  @Override
  public void autonomousPeriodic() {
  }

  @Override
  public void teleopInit() {
  }

  @Override
  public void teleopPeriodic() {

    
    // Robot Drive
    DriveTrain.arcadeDrive(stick.getY(), stick.getZ());

    //Intake system
    if (stick.getRawButton(2)) {
      intakeDoor.set(DoubleSolenoid.Value.kForward);
      flailer.set(ControlMode.PercentOutput, 1);
    } else {
      intakeDoor.set(DoubleSolenoid.Value.kReverse);
      flailer.set(ControlMode.PercentOutput, 0);
    } 

    //Loader
    if (stick.getRawButton(7)) {
      Loader.set(ControlMode.PercentOutput, 1);
    } else {
      Loader.set(ControlMode.PercentOutput, 1);
    }

    //shooter system
    if (stick.getRawButton(1)) {
      shootermaster.set(ControlMode.PercentOutput, 1);
      Timer.delay(2);
      shooterslave.set(ControlMode.PercentOutput, 1);
    } else {
      shootermaster.set(ControlMode.PercentOutput, 0.0);
      shooterslave.set(ControlMode.PercentOutput, 0.0);
    }

    //Arms
    if (stick.getRawButton(5)) {
      leftArm.set(ControlMode.PercentOutput, 1);
      rightArm.set(ControlMode.PercentOutput, 1);
    } else if (stick.getRawButton(3)) {
      leftArm.set(ControlMode.PercentOutput, -1);
      rightArm.set(ControlMode.PercentOutput, -1);
    } else {
      leftArm.set(ControlMode.PercentOutput, 0);
      rightArm.set(ControlMode.PercentOutput, 0);
    }
   
    
    if (stick.getRawButton(6)) {
      armAngel.set(DoubleSolenoid.Value.kForward);
    } else if (stick.getRawButton(4)) {
      armAngel.set(DoubleSolenoid.Value.kReverse);
    } else {
      armAngel.set(DoubleSolenoid.Value.kOff);
    }


  // compressor on and off
    if (stick.getRawButton(12)) {
      comp.start();
    } else if (stick.getRawButton(11)) {
      comp.stop();
    }
    


  }

  @Override
  public void testInit() {
  }

  @Override
  public void testPeriodic() {
  }

}
